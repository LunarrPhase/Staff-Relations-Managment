export class FakeAuth {
    constructor(currentUser?: {});
    currentUserRecord: {};
    createUserWithEmailAndPassword(...args: any[]): Promise<{
        user: {};
    }>;
    deleteUser(...args: any[]): Promise<string>;
    signInWithEmailAndPassword(...args: any[]): Promise<{
        user: {};
    }>;
    signOut(): Promise<string>;
    sendPasswordResetEmail(...args: any[]): void;
    verifyIdToken(...args: any[]): Promise<any>;
    getUser(...args: any[]): Promise<any>;
    createCustomToken(...args: any[]): Promise<any>;
    setCustomUserClaims(...args: any[]): Promise<any>;
    useEmulator(...args: any[]): void;
    get currentUser(): {
        uid: any;
        data: {};
    };
}
export const mockCreateUserWithEmailAndPassword: jest.Mock<any, any>;
export const mockDeleteUser: jest.Mock<any, any>;
export const mockSendPasswordResetEmail: jest.Mock<any, any>;
export const mockSendVerificationEmail: jest.Mock<any, any>;
export const mockSignInWithEmailAndPassword: jest.Mock<any, any>;
export const mockSignOut: jest.Mock<any, any>;
export const mockVerifyIdToken: jest.Mock<any, any>;
export const mockGetUser: jest.Mock<any, any>;
export const mockCreateCustomToken: jest.Mock<any, any>;
export const mockSetCustomUserClaims: jest.Mock<any, any>;
export const mockUseEmulator: jest.Mock<any, any>;
//# sourceMappingURL=auth.d.ts.map