export class Query {
    constructor(collectionName: any, firestore: any, isGroupQuery?: boolean);
    collectionName: any;
    firestore: any;
    filters: any[];
    selectFields: any[] | undefined;
    isGroupQuery: boolean;
    get(...args: any[]): Promise<any>;
    _get(): any;
    select(...fieldPaths: any[]): any;
    where(key: any, comp: any, value: any, ...args: any[]): any;
    offset(...args: any[]): any;
    limit(...args: any[]): any;
    orderBy(...args: any[]): any;
    startAfter(...args: any[]): any;
    startAt(...args: any[]): any;
    withConverter(...args: any[]): any;
    onSnapshot(...args: any[]): jest.Mock<any, any>;
}
declare const mockGet: jest.Mock<any, any>;
declare const mockSelect: jest.Mock<any, any>;
declare const mockWhere: jest.Mock<any, any>;
declare const mockLimit: jest.Mock<any, any>;
declare const mockOrderBy: jest.Mock<any, any>;
declare const mockOffset: jest.Mock<any, any>;
declare const mockStartAfter: jest.Mock<any, any>;
declare const mockStartAt: jest.Mock<any, any>;
declare const mockQueryOnSnapshot: jest.Mock<any, any>;
declare const mockQueryOnSnapshotUnsubscribe: jest.Mock<any, any>;
declare const mockWithConverter: jest.Mock<any, any>;
export declare namespace mocks {
    export { mockGet };
    export { mockSelect };
    export { mockWhere };
    export { mockLimit };
    export { mockOrderBy };
    export { mockOffset };
    export { mockStartAfter };
    export { mockStartAt };
    export { mockQueryOnSnapshot };
    export { mockQueryOnSnapshotUnsubscribe };
    export { mockWithConverter };
}
export {};
//# sourceMappingURL=query.d.ts.map